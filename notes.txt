What was done in the last 5 branches:
- Refactored sidebar component: made code much more understandable with some efficiency increase
- Debounced the range input element
- Made range input element not possible to go below 0 and above 100
- Refactored many other components and files: Map, BetterWMSTileLayer, reducerInitialState etc.
- Learnt how to establish Geoserver
- Created AWS ubuntu virtual machine to server Geoserver layers (stopped because of charges)
- Memoized SV layers: no network requests on opacity change
- It was impossible to install dependencies: fixed 
- Major refactoring - typescript migration
- Fixed problem with TypeScript not recognizing the .geojson file format
- Serve high res layers over https

Plans:

- Adapt for multiple countries. 
    Files and variables that need dynamic change:
    * file: SocioEconLegend.tsx, link in import statement
    * file: useMapFunctions.tsx, import of geojson at the top
    * file: reducerInitialState.tsx, map_settings.latlong 
    * file: reducer.ts, case 'CHANGE_MAP_SETTINGS' 
    * AOI geojson in AOIprojection.tsx

    Give access to certain country to different accounts:
    * Use country selection dropdown or option input elements 
    * Each account to have array of countries it has access to
    * Dropdown will show only countries indicated in this array
    * create a landing page with route "/". If not registered: redirect
    to "/"
    * add interceptors to axios - DONE
    * remove QUIT_HOMEPAGE reducer - DONE
    * potentially remove all reducers conntected with homepage - DONE
    * add INVALID CREDENTIALS case - DONE
    * add CONFIRM EMAIL case - DONE
    * bug - not redirecting to landing from different links when not logged in. Main.tsx - DONE
    * finish adding different error cases in AuthContext.tsx - DONE
    * fix 11000 Mongoose error for duplicate emails - DONE
    * add logout logic with removeUserFromLocalStorage - DONE
    * front-end update protectedRoute to check if this account exists in database like authenticateUser
    in useAuth.tsx

    * add confirm email functionality: admin confirms the email. But user gets email notification
        - install nodemailer and create sendEmail controller - DONE
        - refactor login and register controllers as 11-auth-workflow - DONE
    * figure out why there are 2 requests sent when routing - DONE
    * make backend be case insensitive to email - DONE
    * when making changes to user from admin page, current displayed user settings do not match
    the ones in database - DONE
    * when changing name in admin edit user then email becomes red too - FIXED DONE
    * create different password rules: at least 8 chars, include one number, one lower, one upper case, one special character, no spaces in password - DONE FOR backend
    * user model to contain array of authorized countries - DONE
    * create PasswordChecker component that visually represents if password is correct - DONE
    * implement backend password validation on front end as well - DONE
    * front-end - admin/edit-user - on refresh the page disappears. Fix probably with
    {id} path param - DONE
    * refactor admin/edit-user
    * add checkPermissions on the back end so that one user could not change password
    of another user 
    * on back end when updating password add comparison and validation that old password
    cannot be the same as new
    * add forgot password functionality 
    * password not to be same as 5 previous passwords
    that their account is waiting for admin's confirmation
    * add re-send verification email functionality 
    * add checkForUnauthorizedResponse in axios localStorage logic
    * add encryption of stored data
    * add decryption (non automatic) of stored data
    * add authenticateUser middleware on backend. Functionality:
        check if user's countries authorization array contains(country) --> next()
    * front end: create api functionality to request layers

    

- Change Oblast to how each country calls it's regions


